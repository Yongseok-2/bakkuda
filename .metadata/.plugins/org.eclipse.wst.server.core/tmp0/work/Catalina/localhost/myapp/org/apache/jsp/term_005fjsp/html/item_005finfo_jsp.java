/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-11-30 15:05:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.term_005fjsp.html;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.time.*;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import termpackage.DBConnection;

public final class item_005finfo_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.time");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.time.temporal.ChronoUnit");
    _jspx_imports_classes.add("java.time.format.DateTimeFormatter");
    _jspx_imports_classes.add("termpackage.DBConnection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>상품 상세정보</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../styles.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"../css/item_info.css\"> \r\n");
      out.write("</head>\r\n");
      out.write("<body style=\"overflow-x: hidden\">\r\n");
      out.write("	<header class=\"header\">\r\n");
      out.write("        <img src=\"../images/top_banner.svg\" alt=\"맨위 로고\" class=\"top-bar\">\r\n");
      out.write("        <div class=\"search-bar\">\r\n");
      out.write("            <a href=\"../index.jsp\"><img src=\"../images/main_logo.svg\" alt=\"로고\" class=\"logo\"></a>\r\n");
      out.write("            <form id=\"searchForm\" action=\"search_result.html\" method=\"GET\">\r\n");
      out.write("                <div class=\"search-input-container\">\r\n");
      out.write("                    <input type=\"text\" placeholder=\"🔍 물품명, 장터명, 카테고리 태그 등\" class=\"search-input\" id=\"searchInput\" name=\"query\">\r\n");
      out.write("                    <button type=\"submit\" class=\"search-button\" id=\"searchButton\">🔍</button>\r\n");
      out.write("                </div>\r\n");
      out.write("            </form>\r\n");
      out.write("            <div class=\"icons\">\r\n");
      out.write("                <a href=\"bookmark.jsp\"><span><img src=\"../images/bookmark01.png\" alt=\"북마크\" class=\"icons\"></span></a>\r\n");
      out.write("                <span><img src=\"../images/favorite01.png\" alt=\"즐겨찾기\" class=\"icons\"></span>\r\n");
      out.write("                <a href=\"my_interface.jsp\"><span><img src=\"../images/interpace01.png\" alt=\"내정보\" class=\"icons\"></span></a>\r\n");
      out.write("\r\n");
      out.write("                ");
 
                // 로그인 상태 확인 후 아이디와 로그아웃 버튼 표시
                String username = (String) session.getAttribute("username");
                if (username != null) { 
                
      out.write("\r\n");
      out.write("                    <span class=\"username-display\">");
      out.print( username );
      out.write("</span>\r\n");
      out.write("                    <a href=\"../html/logout.jsp\">\r\n");
      out.write("                        <input type=\"button\" class=\"logout-button\" value=\"로그아웃\">\r\n");
      out.write("                    </a>\r\n");
      out.write("                ");
 
                } else { 
                
      out.write("\r\n");
      out.write("                    <a href=\"../html/login.html\">\r\n");
      out.write("                        <input type=\"button\" class=\"login-button\" value=\"로그인\">\r\n");
      out.write("                    </a>\r\n");
      out.write("                ");
 
                } 
                
      out.write("\r\n");
      out.write("             </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <nav class=\"menu-bar\">\r\n");
      out.write("            <ul>\r\n");
      out.write("                <li><a href=\"#\"><img src=\"../images/category.svg\" alt=\"카테고리\">카테고리</a></li>\r\n");
      out.write("                <li><a href=\"../index.html#my-wants\">내가 원해요</a></li>\r\n");
      out.write("                <li><a href=\"../index.html#others-wants\">상대방이 원해요</a></li>     \r\n");
      out.write("                <li><a href=\"#\">급상승</a></li>\r\n");
      out.write("                <li><a href=\"#\">쏙</a></li>\r\n");
      out.write("                <li><a href=\"#\">이벤트</a></li>\r\n");
      out.write("                <li><a href=\"item.jsp\">상품등록</a></li>\r\n");
      out.write("                \r\n");
      out.write("            </ul>\r\n");
      out.write("        </nav>    \r\n");
      out.write("    </header>\r\n");
      out.write("    	<div class=\"main-content\">\r\n");
      out.write("        <div class=\"item-info\">\r\n");
      out.write("            ");

                String productId = request.getParameter("product_id");
                if (productId != null) {
                    Connection conn = null;
                    PreparedStatement pstmt = null;
                    ResultSet rs = null;

                    try {
                        conn = DBConnection.getConnection();
                        String query = "SELECT pd_name, pd_price, pd_image, pd_information, category, trade_method, owner, created_at " +
                                       "FROM products WHERE product_id = ?";
                        pstmt = conn.prepareStatement(query);
                        pstmt.setInt(1, Integer.parseInt(productId));
                        rs = pstmt.executeQuery();

                        if (rs.next()) {
                            String pdName = rs.getString("pd_name");
                            int pdPrice = rs.getInt("pd_price");
                            String pdImage = rs.getString("pd_image");
                            String pdInformation = rs.getString("pd_information");
                            String category = rs.getString("category");
                            String tradeMethod = rs.getString("trade_method");
                            String owner = rs.getString("owner");
                            Timestamp createdAtTimestamp = rs.getTimestamp("created_at");

                            // 현재 시간과 상품 등록 시간 비교
							LocalDateTime createdAt = createdAtTimestamp.toLocalDateTime();
							LocalDateTime now = LocalDateTime.now();
							long secondsBetween = ChronoUnit.SECONDS.between(createdAt, now);
							long minutesBetween = ChronoUnit.MINUTES.between(createdAt, now);
							long hoursBetween = ChronoUnit.HOURS.between(createdAt, now);
							long daysBetween = ChronoUnit.DAYS.between(createdAt, now);
							long monthsBetween = ChronoUnit.MONTHS.between(createdAt, now);
							long yearsBetween = ChronoUnit.YEARS.between(createdAt, now);
							
							String timeAgo;
							
							if (secondsBetween < 60) {
							    timeAgo = secondsBetween + "초 전";
							} else if (minutesBetween < 60) {
							    timeAgo = minutesBetween + "분 전";
							} else if (hoursBetween < 24) {
							    timeAgo = hoursBetween + "시간 전";
							} else if (daysBetween < 30) {
							    timeAgo = daysBetween + "일 전";
							} else if (monthsBetween < 12) {
							    timeAgo = monthsBetween + "개월 전";
							} else {
							    timeAgo = yearsBetween + "년 전";
							}

            
      out.write("\r\n");
      out.write("                            <!-- 상품 상세 정보 -->\r\n");
      out.write("\r\n");
      out.write("			        <div class=\"product-header\">\r\n");
      out.write("			            <!-- 왼쪽 이미지 영역 -->\r\n");
      out.write("					    <div class=\"photo-container\">\r\n");
      out.write("					        <img src=\"");
      out.print( "../" + pdImage );
      out.write("\" alt=\"상품 이미지\" class=\"product-image\">\r\n");
      out.write("					    </div>\r\n");
      out.write("			            <!-- 세로 구분선 -->\r\n");
      out.write("			            <div style=\"width: 1px; height: 400px; background-color: #ddd; margin: 20px 0;\r\n");
      out.write("			            	 margin-right: 5px; margin-left: 15px;\"></div>\r\n");
      out.write("			            <!-- 오른쪽 상품 정보 영역 -->\r\n");
      out.write("			            <div class=\"product-maininfo\">\r\n");
      out.write("			                <div class=\"info-top\">\r\n");
      out.write("			                    <a href=\"category_result.jsp?category=");
      out.print( java.net.URLEncoder.encode(category, "UTF-8") );
      out.write("\" class=\"category-link\">");
      out.print( category );
      out.write("</a>>\r\n");
      out.write("			                    <a href=\"#\" class=\"brand-link\">삼성</a> \r\n");
      out.write("			                    <div class=\"item-name\">");
      out.print(pdName );
      out.write("</div>\r\n");
      out.write("			                </div>\r\n");
      out.write("						<div class=\"info-middle\">\r\n");
      out.write("						    <div class=\"trade-info\">\r\n");
      out.write("						        <div class=\"trade-method-info\" style=\"display: flex; flex-wrap: wrap;\">\r\n");
      out.write("						            ");
 
						            boolean hasSell = tradeMethod != null && tradeMethod.contains("sell");
						            boolean hasExchange = tradeMethod != null && tradeMethod.contains("exchange");
						
						            // 거래 방식에 맞는 아이콘 추가
						            if (hasSell) { 
						            
      out.write("\r\n");
      out.write("						                <div class=\"trade-icon\">\r\n");
      out.write("						                    <img src=\"../images/sell-icon.svg\" alt=\"판매 아이콘\">\r\n");
      out.write("						                </div>\r\n");
      out.write("						            ");
 } 
						
						            if (hasExchange) { 
						            
      out.write("\r\n");
      out.write("						                <div class=\"trade-icon\">\r\n");
      out.write("						                    <img src=\"../images/trade-icon.svg\" alt=\"교환 아이콘\">\r\n");
      out.write("						                </div>\r\n");
      out.write("						            ");
 } 
						            
      out.write("\r\n");
      out.write("						        </div>\r\n");
      out.write("						        <div class=\"trade-details\">\r\n");
      out.write("						            <a href=\"category_result.jsp?category=");
      out.print( java.net.URLEncoder.encode(category, "UTF-8") );
      out.write("\" class=\"category-link\">");
      out.print( category );
      out.write("</a>\r\n");
      out.write("						            <div class=\"trade-price\">");
      out.print( pdPrice );
      out.write(" 원</div>\r\n");
      out.write("						        </div>\r\n");
      out.write("						    </div>\r\n");
      out.write("						</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			                <div class=\"info-bottom\">\r\n");
      out.write("			                    <div class=\"heart-count-icon\"><img src=\"../images/fill-heart.svg\"></div>\r\n");
      out.write("			                    <div class=\"heart-count\">2</div>\r\n");
      out.write("			                    <div class=\"divider\"></div>\r\n");
      out.write("			                    <div class=\"view-count-icon\"><img src=\"../images/fill-eye.svg\"></div>\r\n");
      out.write("			                    <div class=\"view-count\">87</div>\r\n");
      out.write("			                    <div class=\"divider\"></div>\r\n");
      out.write("			                    <div class=\"time-count-icon\"><img src=\"../images/fill-clock.svg\"></div>\r\n");
      out.write("			                    <div class=\"time-count\">");
      out.print(timeAgo );
      out.write("</div>\r\n");
      out.write("			                    <a href=\"#\" class=\"report-link\">\r\n");
      out.write("			                        <div class=\"report-icon\"><img src=\"../images/fill-report.svg\"></div>\r\n");
      out.write("			                        <div class=\"report\">신고하기</div>\r\n");
      out.write("			                    </a>\r\n");
      out.write("			                </div>\r\n");
      out.write("			                <div class=\"buttons\">\r\n");
      out.write("			                    <a href=\"#\" class=\"heart-button-link\"><img src=\"../images/heart.svg\" alt=\"쏙\" class=\"heart-button\"></a>\r\n");
      out.write("			                    <a href=\"#\" class=\"chat-button\">대화하기</a>\r\n");
      out.write("			                    <a href=\"trade-offer.jsp\" class=\"trade-button\">거래하기</a>\r\n");
      out.write("			                </div>\r\n");
      out.write("			            </div>\r\n");
      out.write("			        </div>\r\n");
      out.write("			        <div class=\"product-subinfo\">\r\n");
      out.write("			            <div class=\"infotext\">\r\n");
      out.write("			                <div class=\"infotext-title\"><h2>상품정보</h2></div>\r\n");
      out.write("			                <div class=\"infotext-text\">");
      out.print(pdInformation );
      out.write("</div>\r\n");
      out.write("			            </div>\r\n");
      out.write("			            <div class=\"shopinfo\">\r\n");
      out.write("			                <div class=\"shopinfo-title\"><h2>창고정보</h2></div>\r\n");
      out.write("			                <div class=\"shopinfo-top\">\r\n");
      out.write("			                    <div class=\"shop-img\"><img src=\"../images/account.svg\"></div>\r\n");
      out.write("			                    <div class=\"shop-details\">\r\n");
      out.write("			                        <div class=\"shop-name\">");
      out.print(owner );
      out.write("님의 창고</div>   <!-- 나중에 nickname으로 바꿔야할거같음 -->\r\n");
      out.write("			                        <div class=\"shop-sum\">\r\n");
      out.write("			                            <a href=\"#\">물품<div class=\"user-item-count\">2</div></a>\r\n");
      out.write("			                            <div class=\"divider-small\"></div>\r\n");
      out.write("			                            <a href=\"#\">팔로워<div class=\"user-follower-count\">10</div></a>\r\n");
      out.write("			                            <div class=\"divider-small\"></div>\r\n");
      out.write("			                            <a href=\"#\">거래후기<div class=\"user-review-count\">4</div></a>\r\n");
      out.write("			                        </div>\r\n");
      out.write("			                    </div>\r\n");
      out.write("			                </div>\r\n");
      out.write("			                <div class=\"clover\">\r\n");
      out.write("			                    <div class=\"clover-title\">클로버지수</div>\r\n");
      out.write("			                    <div class=\"clover-point\">53 / 100</div>\r\n");
      out.write("			                </div>\r\n");
      out.write("			                <div class=\"clover-bar\">\r\n");
      out.write("			                    <div class=\"progress2 progress-moved\">\r\n");
      out.write("			                        <div class=\"progress-bar2\"></div>\r\n");
      out.write("			                    </div>\r\n");
      out.write("			                </div>\r\n");
      out.write("			            </div>\r\n");
      out.write("			        </div>\r\n");
      out.write("					<div class=\"simmilar\">\r\n");
      out.write("    <div class=\"silmmiliar-title\"><h2>비슷한 물품 추천</h2></div>\r\n");
      out.write("    <div class=\"lastest-item\">\r\n");
      out.write("        ");

            if (productId != null && category != null) {
                PreparedStatement similarPstmt = null;
                ResultSet similarRs = null;
                try {
                    String similarQuery = "SELECT pd_name, pd_price, pd_image, product_id, trade_method FROM products " +
                                          "WHERE category = ? AND product_id != ? ORDER BY RAND() LIMIT 8";
                    similarPstmt = conn.prepareStatement(similarQuery);
                    similarPstmt.setString(1, category);
                    similarPstmt.setInt(2, Integer.parseInt(productId));
                    similarRs = similarPstmt.executeQuery();

                    while (similarRs.next()) {
                        String similarName = similarRs.getString("pd_name");
                        int similarPrice = similarRs.getInt("pd_price");
                        String similarImage = similarRs.getString("pd_image");
                        int similarId = similarRs.getInt("product_id");
          

                        String tradeIcons = ""; // 거래 아이콘 저장할 변수

                        if (tradeMethod != null) {
                            String[] methods = tradeMethod.split(","); // 거래 방식을 ','로 구분하여 배열로 분리
                            
                            // 각 거래 방식에 따라 아이콘을 추가
                            for (String method : methods) {
                                if ("exchange".equalsIgnoreCase(method.trim())) {
                                    tradeIcons += "<img src='../images/trade-icon.svg' alt='물물교환 아이콘' class='trade-icon'>";
                                } else if ("sell".equalsIgnoreCase(method.trim())) {
                                    tradeIcons += "<img src='../images/sell-icon.svg' alt='판매 아이콘' class='trade-icon'>";
                                }
                            }
                        }
        
      out.write("\r\n");
      out.write("                        <div class=\"product-container\">\r\n");
      out.write("                            <div class=\"want-item\">\r\n");
      out.write("                                <a href=\"item_info.jsp?product_id=");
      out.print( similarId );
      out.write("\">\r\n");
      out.write("                                    <img src=\"");
      out.print( "../" + similarImage );
      out.write("\" alt=\"");
      out.print( similarName );
      out.write("\" class=\"pd-image\">\r\n");
      out.write("                                    <div class=\"item-details\">\r\n");
      out.write("                                        <div class=\"pd-name\">");
      out.print( similarName );
      out.write("</div>\r\n");
      out.write("                                        <div class=\"pd-price\">");
      out.print( similarPrice );
      out.write(' ');
      out.write('원');
      out.print( tradeIcons );
      out.write("\r\n");
      out.write("                                        </div>\r\n");
      out.write("                                    </div>\r\n");
      out.write("                                </a>\r\n");
      out.write("                                <!-- 거래 방식 아이콘 추가 -->\r\n");
      out.write("\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("        ");

                    }
                } catch (Exception e) {
                    out.println("<p>비슷한 물품을 가져오는 중 오류 발생: " + e.getMessage() + "</p>");
                } finally {
                    try { if (similarRs != null) similarRs.close(); } catch (SQLException ignored) {}
                    try { if (similarPstmt != null) similarPstmt.close(); } catch (SQLException ignored) {}
                }
            }
        
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");

                        } else {
                            out.println("<p>상품 정보를 찾을 수 없습니다.</p>");
                        }
                    } catch (Exception e) {
                        out.println("<p>데이터베이스 오류: " + e.getMessage() + "</p>");
                    } finally {
                        try { if (rs != null) rs.close(); } catch (SQLException ignored) {}
                        try { if (pstmt != null) pstmt.close(); } catch (SQLException ignored) {}
                        try { if (conn != null) conn.close(); } catch (SQLException ignored) {}
                    }
                } else {
                    out.println("<p>상품 ID가 제공되지 않았습니다.</p>");
                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    <script src=\"../scripts.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
