/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.96
 * Generated at: 2024-11-30 15:06:38 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.term_005fjsp.html;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import termpackage.DBConnection;
import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import java.io.File;
import javax.servlet.http.Part;
import java.io.IOException;
import java.util.*;

public final class item_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("com.oreilly.servlet.multipart.DefaultFileRenamePolicy");
    _jspx_imports_classes.add("javax.servlet.http.Part");
    _jspx_imports_classes.add("java.io.IOException");
    _jspx_imports_classes.add("com.oreilly.servlet.MultipartRequest");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("termpackage.DBConnection");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>상품 처리</title>\r\n");
      out.write("    <script type=\"text/javascript\">\r\n");
      out.write("        // 상품 등록 성공 후 알림을 띄우고 index.jsp로 리다이렉트\r\n");
      out.write("        function showAlertAndRedirect() {\r\n");
      out.write("            alert(\"상품 등록에 성공하셨습니다.\");\r\n");
      out.write("            window.location.href = \"../index.jsp\"; // index.jsp로 리다이렉트\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

    // 세션에서 로그인한 사용자의 아이디를 가져옴
    String owner = (String) session.getAttribute("username");  // 세션에서 사용자 아이디 가져오기

    // 만약 세션에 아이디가 없으면 로그인 페이지로 리다이렉트
    if (owner == null) {
        response.sendRedirect("login.html");  // 로그인 페이지로 리다이렉트
        return;
    }

    // 파일 업로드 처리
    String uploadPath = "D:\\term\\myapp\\src\\main\\webapp\\upload"; // 파일 저장 경로
    int maxSize = 5 * 1024 * 1024; // 5MB 제한
    String encoding = "UTF-8";

    MultipartRequest multi = null;

    try {
        multi = new MultipartRequest(request, uploadPath, maxSize, encoding, new DefaultFileRenamePolicy());

        // 업로드된 파일명 및 데이터 수집
        Enumeration files = multi.getFileNames();
        List<String> pd_images = new ArrayList<>(); // 여러 이미지 파일을 저장할 리스트

        while (files.hasMoreElements()) {
            String fileInputName = (String) files.nextElement();
            String pd_image = multi.getFilesystemName(fileInputName); // 저장된 파일명
            if (pd_image != null) {
                pd_images.add("upload/" + pd_image); // 상대 경로 저장
            }
        }

        // 폼 데이터 수집
        String pd_name = multi.getParameter("pd_name");
        int pd_price = Integer.parseInt(multi.getParameter("pd_price"));
        String pd_information = multi.getParameter("pd_information");
        String[] categories = multi.getParameterValues("category[]");
        String pd_status = multi.getParameter("pd_status");
        String[] trade_methods = multi.getParameterValues("trade_method[]");
        String[] trade_systems = multi.getParameterValues("trade_system[]");
        String location_1 = multi.getParameter("location_1"); // 거래 희망 지역 1
        String location_2 = multi.getParameter("location_2"); // 거래 희망 지역 2
        String[] locations = multi.getParameterValues("location_1[]");
        // 체크박스 상태 확인
        
        String trade_method = (trade_methods != null) ? String.join(",", trade_methods) : "";
        String trade_system = (trade_systems != null) ? String.join(",", trade_systems) : "";
        String category = (categories != null) ? String.join(",", categories) : "";
		String location = (locations != null) ? String.join(",", locations) : "";
		
        // 물물교환 가격 처리
        String trade_price = multi.getParameter("trade_price");
        String trade_max_price = multi.getParameter("trade_max_price");

        // 판매 가격 처리
        String sell_price = multi.getParameter("sell_price");

        // DB 저장
        Connection conn = null;
        PreparedStatement stmt = null;

        try {
            conn = DBConnection.getConnection();
            if (conn != null) {
                // SQL 작성 및 실행
                 String sql = "INSERT INTO products (pd_name, pd_price, pd_image, pd_information, owner, pd_status, category, trade_method, trade_system, location_1, location_2) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                 stmt = conn.prepareStatement(sql);
                 stmt.setString(1, pd_name);
                 stmt.setInt(2, pd_price);
                 stmt.setString(3, String.join(",", pd_images));
                 stmt.setString(4, pd_information);
                 stmt.setString(5, owner);
                 stmt.setString(6, pd_status);
                 stmt.setString(7, category);  // 다중 선택값 저장
                 stmt.setString(8, trade_method);  // 다중 선택값 저장
                 stmt.setString(9, trade_system);
                 stmt.setString(10, location_1);  // 다중 선택값 저장
                 stmt.setString(11, location_2);

                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected > 0) {
                    out.println("<script type='text/javascript'>");
                    out.println("showAlertAndRedirect();");  // 상품 등록 성공 후 알림 및 리다이렉트
                    out.println("</script>");
                } else {
                    out.println("<p>상품 등록 실패. 다시 시도해 주세요.</p>");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            out.println("<p>SQL 에러 발생: " + e.getMessage() + "</p>");
        } finally {
            if (stmt != null) stmt.close();
            if (conn != null) conn.close();
        }
    } catch (Exception e) {
        e.printStackTrace();
        out.println("<p>파일 업로드 에러: " + e.getMessage() + "</p>");
    }

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
